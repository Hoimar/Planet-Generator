[gd_resource type="ShaderMaterial" load_steps=17 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=2]
size = Vector2( 250, 150 )
expression = "output = 1.0 - pow(cos(3.142 * x / 2.0), 3.5);"

[sub_resource type="VisualShaderNodeColorUniform" id=3]
uniform_name = "sun_color"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDistance" id=5]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 4.7 ]
operator = 5

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformDecompose" id=9]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "world"

[sub_resource type="VisualShaderNodeTransformDecompose" id=11]

[sub_resource type="VisualShaderNodeTransformCompose" id=12]

[sub_resource type="VisualShaderNodeTransformMult" id=13]

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeExpression" id=15]
size = Vector2( 250, 150 )
expression = "MODELVIEW_MATRIX = (input)"

[sub_resource type="VisualShader" id=16]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded, shadows_disabled;

uniform vec4 sun_color : hint_color;



void vertex() {
// Input:8
	mat4 n_out8p0 = INV_CAMERA_MATRIX;

// Input:2
	mat4 n_out2p0 = CAMERA_MATRIX;

// TransformDecompose:3
	vec3 n_out3p0 = n_out2p0[0].xyz;
	vec3 n_out3p1 = n_out2p0[1].xyz;
	vec3 n_out3p2 = n_out2p0[2].xyz;
	vec3 n_out3p3 = n_out2p0[3].xyz;

// Input:4
	mat4 n_out4p0 = WORLD_MATRIX;

// TransformDecompose:5
	vec3 n_out5p0 = n_out4p0[0].xyz;
	vec3 n_out5p1 = n_out4p0[1].xyz;
	vec3 n_out5p2 = n_out4p0[2].xyz;
	vec3 n_out5p3 = n_out4p0[3].xyz;

// TransformCompose:6
	mat4 n_out6p0 = mat4(vec4(n_out3p0, 0.0), vec4(n_out3p1, 0.0), vec4(n_out3p2, 0.0), vec4(n_out5p3, 1.0));

// TransformMult:7
	mat4 n_out7p0 = n_out8p0 * n_out6p0;

// Expression:9
	float n_out9p0;
	n_out9p0 = 0.0;
	{
		MODELVIEW_MATRIX = (n_out7p0)
	}

// Output:0
	ROUGHNESS = n_out9p0;

}

void fragment() {
// ColorUniform:15
	vec3 n_out15p0 = sun_color.rgb;
	float n_out15p1 = sun_color.a;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// Distance:3
	vec3 n_in3p1 = vec3(0.50000, 0.50000, 0.00000);
	float n_out3p0 = distance(n_out2p0, n_in3p1);

// ScalarOp:7
	float n_in7p0 = 1.00000;
	float n_out7p0 = n_in7p0 - n_out3p0;

// ScalarOp:8
	float n_in8p1 = 4.70000;
	float n_out8p0 = pow(n_out7p0, n_in8p1);

// Expression:14
	float n_out14p0;
	n_out14p0 = 0.0;
	{
		n_out14p0 = 1.0 - pow(cos(3.142 * n_out8p0 / 2.0), 3.5);
	}

// VectorOp:10
	vec3 n_out10p0 = n_out15p0 * vec3(n_out14p0);

// Output:0
	ALBEDO = n_out10p0;
	ALPHA = n_out14p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -345.451, 76.3738 )
flags/shadows_disabled = true
flags/unshaded = true
nodes/vertex/0/position = Vector2( 680, 80 )
nodes/vertex/2/node = SubResource( 8 )
nodes/vertex/2/position = Vector2( -220, 160 )
nodes/vertex/3/node = SubResource( 9 )
nodes/vertex/3/position = Vector2( -40, 220 )
nodes/vertex/4/node = SubResource( 10 )
nodes/vertex/4/position = Vector2( -220, 400 )
nodes/vertex/5/node = SubResource( 11 )
nodes/vertex/5/position = Vector2( -40, 380 )
nodes/vertex/6/node = SubResource( 12 )
nodes/vertex/6/position = Vector2( 280, 460 )
nodes/vertex/7/node = SubResource( 13 )
nodes/vertex/7/position = Vector2( 500, 340 )
nodes/vertex/8/node = SubResource( 14 )
nodes/vertex/8/position = Vector2( 280, 220 )
nodes/vertex/9/node = SubResource( 15 )
nodes/vertex/9/position = Vector2( 560, 500 )
nodes/vertex/9/size = Vector2( 250, 150 )
nodes/vertex/9/input_ports = "0,3,input;"
nodes/vertex/9/output_ports = "0,0,output0;"
nodes/vertex/9/expression = "MODELVIEW_MATRIX = (input)"
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 5, 0, 3, 0, 6, 0, 3, 1, 6, 1, 3, 2, 6, 2, 5, 3, 6, 3, 6, 0, 7, 1, 8, 0, 7, 0, 7, 0, 9, 0, 9, 0, 0, 8 )
nodes/fragment/0/position = Vector2( 780, 340 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -660, 320 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -500, 320 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -320, 320 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -140, 320 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 580, 160 )
nodes/fragment/14/node = SubResource( 2 )
nodes/fragment/14/position = Vector2( 40, 320 )
nodes/fragment/14/size = Vector2( 250, 150 )
nodes/fragment/14/input_ports = "0,0,x;"
nodes/fragment/14/output_ports = "0,0,output;"
nodes/fragment/14/expression = "output = 1.0 - pow(cos(3.142 * x / 2.0), 3.5);"
nodes/fragment/15/node = SubResource( 3 )
nodes/fragment/15/position = Vector2( 340, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 7, 1, 7, 0, 8, 0, 10, 0, 0, 0, 14, 0, 10, 1, 8, 0, 14, 0, 14, 0, 0, 1, 15, 0, 10, 0 )

[resource]
shader = SubResource( 16 )
shader_param/sun_color = Color( 1, 1, 0.94902, 1 )
